name: Build to dev

on:
  push:
    tags:
      - "v*-*"
      - "!v*-*-*"
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev-sbs:personbruker
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Define variables
        id: vars
        run: |
          echo ::set-output name=VERSION::$(git tag | grep -E '^v[0-9]' | grep -v '-' | sort -V | tail -1)-$(git rev-parse --short HEAD)
          echo ::set-output name=RUN_ID::${GITHUB_RUN_ID}
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build application
        id: build
        run: |
          version=${{ steps.vars.outputs.VERSION }}
          gradle clean build deploy
          echo ::set-output name=FILENAME::navno.jar
      - uses: actions/upload-artifact@v1
        with:
          name: Application
          path: build/libs
      - name: Create release
        id: create_release
        uses: fleskesvor/create-release@1a72e235c178bf2ae6c51a8ae36febc24568c5fe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.VERSION }}
          release_name: Release ${{ steps.vars.outputs.VERSION }}
          prerelease: true
      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/libs/${{ steps.build.outputs.FILENAME }}
          asset_name: ${{ steps.build.outputs.FILENAME }}
          asset_content_type: application/java-archive
  deploy:
    needs: build
    runs-on: self-hosted
    environment: dev-sbs:personbruker
    steps:
      - name: Cleanup
        run: rm -rf $(ls navno.jar)
      - name: Download artifact
        env:
          DEPLOY_PAT: ${{ secrets.DEPLOY_PAT }}
          GITHUB_REPOSITORY: ${{ GITHUB_REPOSITORY }}
          GITHUB_RUN_ID: ${{ GITHUB_RUN_ID }}
        run: |
          ARTIFACT_ID="$(curl \
          -H "authorization: Bearer ${DEPLOY_PAT}" \
          -s https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/artifacts \
          | jq '.artifacts[0].id')"

          echo Downloading artifact $ARTIFACT_ID
          curl -o app.zip \
          --cacert /etc/pki/tls/cacert.pem \
          -H "Authorization: Bearer ${DEPLOY_PAT}" \
          -L "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/artifacts/$ARTIFACT_ID/zip"
          unzip -o app.zip
      - name: Deploy application
        env:
          ENONIC_CLI_REMOTE_URL: ${{ secrets.ENONIC_CLI_REMOTE_URL }}
          ENONIC_CLI_REMOTE_USER: ${{ secrets.ENONIC_CLI_REMOTE_USER }}
          ENONIC_CLI_REMOTE_PASS: ${{ secrets.ENONIC_CLI_REMOTE_PASS }}
        run: |
          echo Deploying $(ls navno.jar)
          curl \
            -k ${ENONIC_CLI_REMOTE_URL} \
            --user "${ENONIC_CLI_REMOTE_USER}:${ENONIC_CLI_REMOTE_PASS}" \
            -F file=@$(ls navno.jar)
