// Build dependencies
buildscript {
    // Internal dependencies
    if (project.hasProperty('build-inside-firewall')) {
        repositories {
            maven {
                url "https://maven.adeo.no/nexus/content/groups/public/"
            }
            maven {
                url "https://maven.adeo.no/nexus/content/repositories/m2internal/"
            }
        }
        dependencies {
            classpath "gradle.plugin.com.enonic.gradle:xp-gradle-plugin:1.1.0"
        }
    }
}

// Build plugins
plugins {
    id 'com.enonic.xp.app' version '3.0.0'
    id "com.moowork.node" version '1.3.1'
    id 'java'
    id "com.github.node-gradle.node" version '2.2.4'
    id 'no.item.xp.codegen' version '1.1.7'
}
node {
    version = '10.15.3'
}
apply plugin: "com.enonic.xp.app"

// App config
app {
    name = project.appName
    displayName = 'Nav.no - XP 2019'
    vendorName = 'Enonic AS'
    vendorUrl = 'http://enonic.com'
    systemVersion = "${xpVersion}"
}

// Project dependencies
repositories {

    // External dependencies
    if (!project.hasProperty('build-inside-firewall')) {
        mavenLocal()
        mavenCentral()
        xp.enonicRepo()
    }

    maven {
        url "https://maven.adeo.no/nexus/content/groups/public"
    }
    maven {
        url  "https://dl.bintray.com/ljl/maven"
    }
    maven {
        url  "https://dl.bintray.com/pdrevland/wsUtil"
    }
}

dependencies {
    implementation "com.enonic.xp:core-api:${xpVersion}"
    implementation "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-common:${xpVersion}"
    include "com.enonic.xp:lib-event:${xpVersion}"
    include "com.enonic.xp:lib-auditlog:${xpVersion}"
    include "com.enonic.lib:lib-thymeleaf:2.0.0"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include "com.enonic.xp:lib-auth:${xpVersion}"
    include "com.enonic.xp:lib-task:${xpVersion}"
    include "com.enonic.xp:lib-context:${xpVersion}"
    include "com.enonic.xp:lib-io:${xpVersion}"
    include "com.enonic.xp:lib-repo:${xpVersion}"
    include "com.enonic.xp:lib-node:${xpVersion}"
    include "com.enonic.xp:lib-websocket:${xpVersion}"
    include "com.enonic.xp:lib-cluster:${xpVersion}"
    include 'com.enonic.lib:lib-router:1.0.0'
    include "com.enonic.lib:lib-http-client:2.2.1"
    include "com.enonic.lib:lib-cache:2.1.0"
    include 'com.enonic.lib:lib-cron:1.1.1'
    include "com.enonic.lib:lib-guillotine:4.2.3"
    include "com.enonic.lib:lib-graphql-playground:0.0.1"
    include "no.item.wsUtil:wsUtil:1.1.1"
    webjar "org.webjars:momentjs:2.14.1"
    include "org.jsoup:jsoup:1.13.1"
}

task npmInstallForce( type: NpmTask ) {
    description = 'Update all project node dependencies'
    args = ['install', '--force']
}

task cleanNode( type: org.gradle.api.tasks.Delete ) {
    delete 'node_modules'
}

task clientWebpack( type: NodeTask, dependsOn: npmInstall ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.client.config.js', '--color' ]
    description = 'Build UI resources (js, css, etc).'
    inputs.dir 'src/main'
    outputs.dir "${buildDir}/resources/main"
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

task serverWebpack( type: NodeTask, dependsOn: npmInstall ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.server.config.js', '--color' ]
    description = 'Build server JS.'
    inputs.dir 'src/main'
    outputs.dir "${buildDir}/resources/main"
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

processResources {
    include '**/*'
    exclude '**/.gitkeep'
    exclude '**/tsconfig.*.json'
    exclude '**/*.es'
    exclude '**/*.es6'
    exclude '**/*.ts'
    exclude 'assets/js/**/*.js'
    include 'assets/js/bundle.js'
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.sass'
    exclude 'assets/styles/**/*.scss'
    includeEmptyDirs false
}

jar {
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.sass'
    exclude 'assets/styles/**/*.scss'
    exclude 'assets/styles/**/*.js'

    dependsOn += generateTypeScript
    // dependsOn += clientWebpack
    dependsOn += serverWebpack
}

jar.outputs.dir "${buildDir}/resources/main"

def nodeEnvironment() {
    def environments = [ prod : 'production', dev: 'development' ]
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}
