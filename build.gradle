// Build dependencies
buildscript {
    // Internal dependencies
    if (project.hasProperty('build-inside-firewall')) {
        repositories {
            maven {
                url "http://maven.adeo.no/nexus/content/groups/public/"
            }
            maven {
                url "http://maven.adeo.no/nexus/content/repositories/m2internal/"
            }
        }
        dependencies {
            classpath "gradle.plugin.com.enonic.gradle:xp-gradle-plugin:1.1.0"
        }
    }
}

// Build plugins
plugins {
    id 'com.enonic.xp.app' version '2.0.0'
    id "com.moowork.node" version '1.3.1'
}
node {
    version = '10.15.3'
}
apply plugin: "com.enonic.xp.app"

// App config
app {
    name = project.appName
    displayName = 'Nav.no - XP 2019'
    vendorName = 'Enonic AS'
    vendorUrl = 'http://enonic.com'
    systemVersion = "${xpVersion}"
}

// Project dependencies
repositories {

    // External dependencies
    if (!project.hasProperty('build-inside-firewall')) {
        mavenLocal()
        jcenter()
        xp.enonicRepo()
    }

    maven {
        url "http://maven.adeo.no/nexus/content/groups/public"
    }
    maven {
        url  "https://dl.bintray.com/ljl/maven"
    }
    maven {
        url  "https://dl.bintray.com/pdrevland/wsUtil"
    }
    maven {
        url 'http://repo.enonic.com/public'
    }
}

dependencies {
    compile "com.enonic.xp:core-api:${xpVersion}"
    compile "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-common:${xpVersion}"
    include "com.enonic.xp:lib-event:${xpVersion}"
    include "com.enonic.lib:lib-thymeleaf:2.0.0"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include "com.enonic.lib:lib-mustache:2.0.0"
    include "com.enonic.xp:lib-auth:${xpVersion}"
    include "com.enonic.xp:lib-task:${xpVersion}"
    include "com.enonic.xp:lib-context:${xpVersion}"
    include "com.enonic.xp:lib-io:${xpVersion}"
    include "com.enonic.xp:lib-repo:${xpVersion}"
    include "com.enonic.xp:lib-node:${xpVersion}"
    include "com.enonic.xp:lib-websocket:${xpVersion}"
    include "com.enonic.xp:lib-cluster:${xpVersion}"
    include 'com.enonic.lib:lib-router:1.0.0'
    include 'com.enonic.lib:menu:2.0.1'
    include 'com.enonic.lib:util:1.3.0'
    include 'com.enonic.lib:urlredirect:2.0.0'
    include "com.enonic.lib:lib-http-client:2.1.1"
    include "com.enonic.lib:lib-cache:2.1.0"
    include 'com.enonic.lib:lib-cron:1.1.1'
    include "no.item.wsUtil:wsUtil:1.1.1"
	  include 'com.enonic.lib:lib-react4xp:1.0.2'
    webjar "org.webjars:momentjs:2.14.1"
}

// Tasks
task babelJs(type: NpmTask, dependsOn: 'npmInstall') {
    if (project.hasProperty( 'watch' )) {
        args = ['run', 'dev']
    } else {
        args = ['run', 'build']
    }

    inputs.dir 'src/main/resources'
    outputs.dir "$buildDir/resources/main"
}



jar.dependsOn += babelJs
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

// Resolves the project folder root
def ROOT = project.projectDir.toString()

def react4xp = {}
file("react4xp.properties").withReader { reader ->
    react4xp = new Properties()
    react4xp.load(reader)
}

if(react4xp.nashornPolyfillsSource != null) {
    react4xp.NASHORNPOLYFILLS_SOURCE = react4xp.nashornPolyfillsSource
}
if(react4xp.buildEnv != null) {
    react4xp.BUILD_ENV = react4xp.buildEnv
}




// These are not supplied from react4xp, but are just names used for buildtime housekeeping:
def markerName = "node_modules/react4xp/npmInstalled.marker"
def linkMarkerName = "node_modules/react4xp/npmLinked.marker"

task nsiInstall(type:NodeTask) {
    doFirst {
        println "react4xp.properties#buildEnv is set to '" + react4xp.buildEnv + "':\nOVERRIDING VANILLA npmInstall IN FAVOR OF node-safe-install (nsi)." // Because nsi retains 'npm link' symlinks!
    }
    script = file("node_modules/npm-safe-install/out/cli.js")   // npm-safe-install comes with react4xp@^1.0.0

    doLast {
        def marker = new File(linkMarkerName)
        new File(marker.getParent()).mkdirs()
        marker.text = """
Marker file, indicating that react4xp in node_module is locally linked.
"""
    }
}
nsiInstall.inputs.files('package.json', 'package-lock.json')
nsiInstall.outputs.file('package-lock.json')
nsiInstall.outputs.file file(linkMarkerName)

if (new File(linkMarkerName).exists()) {
    npmInstall.enabled = false
    npmInstall.dependsOn nsiInstall

} else {
    npmInstall.enabled = true
    npmInstall.inputs.files('package.json', 'package-lock.json')
    npmInstall.outputs.file('package-lock.json')
    npmInstall.outputs.file file(markerName)
    npmInstall.doLast {
        def marker = new File(markerName)
        new File(marker.getParent()).mkdirs()
        marker.text = """
Marker file, indicating that the npmInstall gradle task has been run in this subproject - faster than traversing the entire node_modules tree for changes.
"""
    }
}


react4xp.masterConfigFileName = react4xp.masterConfigFileName != null ? react4xp.masterConfigFileName : "build/react4xp_constants.json"
react4xp.outputFileName = ROOT + '/' + react4xp.masterConfigFileName

react4xp.verbose = react4xp.verbose != null && react4xp.verbose.toBoolean()
react4xp.buildRuntimeClient = react4xp.buildRuntimeClient != null && react4xp.buildRuntimeClient.toBoolean()
react4xp.buildExternals = react4xp.buildExternals != null && react4xp.buildExternals.toBoolean()
react4xp.overwriteConstantsFile = react4xp.overwriteConstantsFile != null && react4xp.overwriteConstantsFile.toBoolean()


// Build the master config JSON file and the copy:
task config_react4xp(type: NodeTask) {
    group 'React4xp'
    description 'Build the master config JSON file and its copy'

    script = file('node_modules/react4xp-buildconstants/bin/cli.js')       // react4xp-buildconstants comes with react4xp@^1.0.0
    args = [ ROOT, JsonOutput.toJson(JsonOutput.toJson(react4xp)) ]
}
config_react4xp.inputs.file("react4xp.properties")
config_react4xp.outputs.file(react4xp.masterConfigFileName)

config_react4xp.dependsOn += 'npmInstall'
config_react4xp.dependsOn += 'processResources'


// Necessary placeholder, will be filled during build
def CONFIG = {}

task config_tasks {
    // After the above script has run and created the config file, use the constructed values from the script to update the configuration of the next task(s):
    doLast {
        // Read the file content into an object
        def REACT4XP_TASKS = [
                "react4xp_components",
                "react4xp_externals",
                "react4xp_client",
                "react4xp_nashornpolyfills"
        ]
        def configFile = new File(react4xp.masterConfigFileName)
        CONFIG = new JsonSlurper().parseText(configFile.text)

        REACT4XP_TASKS.each {
            tasks["${it}"].configure {
                inputs.dir(CONFIG.SRC_SITE)
                inputs.dir(CONFIG.SRC_R4X)
                outputs.dir(CONFIG.BUILD_R4X)
            }
        }
    }
}
config_tasks.dependsOn += 'config_react4xp'

// Compile:
task react4xp_components(type: NodeTask) {
    group 'React4xp'
    description "Compile the parent project's react components"

    script = file('node_modules/webpack/bin/webpack.js')
    args = [
            '--config', 'node_modules/react4xp-build-components/webpack.config.js', // react4xp-build-components comes with react4xp@^1.0.0
            '--color',
            '--env.VERBOSE=' + react4xp.verbose,
            '--env.ENTRY_DIRS=' + react4xp.entryDirs,
            '--env.CHUNK_DIRS=' + react4xp.chunkDirs,
            '--env.ROOT="' + ROOT +'"'
    ]
    if (react4xp.overrideComponentWebpack != null) {
        args += '--env.OVERRIDE_COMPONENT_WEBPACK=' + react4xp.overrideComponentWebpack
    }

    // Pretty if chatty
    if (react4xp.verbose) {
        args += '--progress'
    }

    // Finally, and mandatorily: tells all of the webpack steps here where to find the react4xp master config file that was built during the config_react4xp task
    args += '--env.REACT4XP_CONFIG_FILE=' + react4xp.masterConfigFileName

    if (react4xp.verbose) {
        println "react4xp_components task - args:"
        println "\t${args}\n"
    }

    inputs.file(react4xp.outputFileName)
    inputs.file("package.json")
    inputs.file("package-lock.json")
}
react4xp_components.dependsOn += 'config_tasks'
jar.dependsOn += "react4xp_components"


task react4xp_externals(type: NodeTask) {
    group 'React4xp'
    description 'Compile the externals asset (react and react-dom)'

    script = file('node_modules/webpack/bin/webpack.js')
    args = [
            '--config', 'node_modules/react4xp-runtime-externals/webpack.config.js',  // react4xp-runtime-externals comes with react4xp@^1.0.0
            '--color',
            '--env.VERBOSE=' + react4xp.verbose,
            '--env.ENTRY_DIRS=' + react4xp.entryDirs,
            '--env.CHUNK_DIRS=' + react4xp.chunkDirs,
            '--env.ROOT="' + ROOT +'"'
    ]

    // Pretty if chatty
    if (react4xp.verbose) {
        args += '--progress'
    }

    // Finally, and mandatorily: tells all of the webpack steps here where to find the react4xp master config file that was built during the config_react4xp task
    args += '--env.REACT4XP_CONFIG_FILE=' + react4xp.masterConfigFileName

    if (react4xp.verbose && react4xp.buildExternals) {
        println "react4xp_externals task - args:"
        println "\t${args}\n"
    }

    inputs.file(react4xp.outputFileName)
    inputs.file("package.json")
    inputs.file("package-lock.json")
}
react4xp_externals.dependsOn += 'config_tasks'
if (react4xp.buildExternals) {
    jar.dependsOn += 'react4xp_externals'
}



task react4xp_client(type: NodeTask) {
    group 'React4xp'
    description 'Compile the react4xp runtime client'

    script = file('node_modules/webpack/bin/webpack.js')
    args = [
            '--config', 'node_modules/react4xp-runtime-client/webpack.config.js',   // react4xp-runtime-client comes with react4xp@^1.0.0
            '--color',
            '--env.VERBOSE=' + react4xp.verbose,
            '--env.ENTRY_DIRS=' + react4xp.entryDirs,
            '--env.CHUNK_DIRS=' + react4xp.chunkDirs,
            '--env.ROOT="' + ROOT +'"'
    ]

    // Pretty if chatty
    if (react4xp.verbose) {
        args += '--progress'
    }

    // Finally, and mandatorily: tells all of the webpack steps here where to find the react4xp master config file that was built during the config_react4xp task
    args += '--env.REACT4XP_CONFIG_FILE=' + react4xp.masterConfigFileName

    if (react4xp.verbose && react4xp.buildRuntimeClient) {
        println "react4xp_client task - args:"
        println "\t${args}\n"
    }

    inputs.file(react4xp.outputFileName)
    inputs.file("package.json")
    inputs.file("package-lock.json")
}
react4xp_client.dependsOn += 'config_tasks'
if (react4xp.buildRuntimeClient) {
    jar.dependsOn += 'react4xp_client'
}



task react4xp_nashornpolyfills(type: NodeTask) {
    group 'React4xp'
    description 'Run the imported react4xp webpack scripts that compile the components and externals (as well as client and nashorn polyfills if needed)'

    script = file('node_modules/webpack/bin/webpack.js')
    args = [
            '--config', 'node_modules/react4xp-runtime-nashornpolyfills/webpack.config.js',    // react4xp-runtime-nashornpolyfills comes with react4xp@^1.0.0
            '--color',
            '--env.VERBOSE=' + react4xp.verbose,
            '--env.ENTRY_DIRS=' + react4xp.entryDirs,
            '--env.CHUNK_DIRS=' + react4xp.chunkDirs,
            '--env.ROOT="' + ROOT +'"'
    ]

    // Pretty if chatty
    if (react4xp.verbose) {
        args += '--progress'
    }

    // Finally, and mandatorily: tells all of the webpack steps here where to find the react4xp master config file that was built during the config_react4xp task
    args += '--env.REACT4XP_CONFIG_FILE=' + react4xp.masterConfigFileName

    if (react4xp.verbose && react4xp.nashornPolyfillsSource != null) {
        println "react4xp_nashornpolyfills task - args:"
        println "\t${args}\n"
    }

    inputs.file(react4xp.outputFileName)
    inputs.file("package.json")
    inputs.file("package-lock.json")
}
react4xp_nashornpolyfills.dependsOn += 'config_tasks'
if (react4xp.nashornPolyfillsSource != null) {
    jar.dependsOn += 'react4xp_nashornpolyfills'
}
