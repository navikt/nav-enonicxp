//
// Mixins
// --------------------------------------------------

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
.clearfix() {
	&:before,
	&:after {
		content: " "; /* 1 */
		display: table; /* 2 */
	}
	&:after {
		clear: both;
	}
}

// WebKit-style focus
.tab-focus() {
	// Default
	outline: thin dotted #333;
	// WebKit
	outline: 5px auto -webkit-focus-ring-color;
	outline-offset: -2px;
}

// Center-align a block level element
.center-block() {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Sizing shortcuts
.size(@width; @height) {
	width: @width;
	height: @height;
}

// Placeholder text
.placeholder(@color: @gray-lighter) {
	&:-moz-placeholder {
		color: @color;
	}
	// Firefox 4-18
	&::-moz-placeholder {
		color: @color; // Firefox 19+
		opacity: 1;
	}
	// See https://github.com/twbs/bootstrap/pull/11526
	&:-ms-input-placeholder {
		color: @color;
	}
	// Internet Explorer 10+
	&::-webkit-input-placeholder {
		color: @color;
	}
	// Safari and Chrome
}

// Text overflow
// Requires inline-block or block for proper styling
.text-overflow() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// New mixin to use as of v3.0.1
.text-hide() {
	font: ~"0/0" a;
	color: transparent;
	text-shadow: none;
	background-color: transparent;
	border: 0;
}

// CSS3 PROPERTIES
// --------------------------------------------------

// Border Radius
.border-radius(@radius) {
	-webkit-border-radius: @radius;
	-moz-border-radius: @radius;
	border-radius: @radius;
}

// Single side border-radius
.border-top-radius(@radius) {
	border-top-right-radius: @radius;
	border-top-left-radius: @radius;
}

.border-right-radius(@radius) {
	border-bottom-right-radius: @radius;
	border-top-right-radius: @radius;
}

.border-bottom-radius(@radius) {
	border-bottom-right-radius: @radius;
	border-bottom-left-radius: @radius;
}

.border-left-radius(@radius) {
	border-bottom-left-radius: @radius;
	border-top-left-radius: @radius;
}

// Drop shadows
.box-shadow(@shadow) {
	-webkit-box-shadow: @shadow; // iOS <4.3 & Android <4.1
	box-shadow: @shadow;
}

// Transitions
.transition(@transition) {
	-moz-transition: @transition;
	-webkit-transition: @transition;
	transition: @transition;
}

.transition-property(@transition-property) {
	-webkit-transition-property: @transition-property;
	transition-property: @transition-property;
}

.transition-delay(@transition-delay) {
	-webkit-transition-delay: @transition-delay;
	transition-delay: @transition-delay;
}

.transition-duration(@transition-duration) {
	-webkit-transition-duration: @transition-duration;
	transition-duration: @transition-duration;
}

.transition-transform(@transition) {
	-webkit-transition: -webkit-transform @transition;
	-moz-transition: -moz-transform @transition;
	-o-transition: -o-transform @transition;
	transition: transform @transition;
}

// Transformations
.rotate(@degrees) {
	-webkit-transform: rotate(@degrees);
	-ms-transform: rotate(@degrees); // IE9+
	transform: rotate(@degrees);
}

.scale(@ratio) {
	-webkit-transform: scale(@ratio);
	-ms-transform: scale(@ratio); // IE9+
	transform: scale(@ratio);
}

.translate(@x; @y) {
	-webkit-transform: translate(@x, @y);
	-ms-transform: translate(@x, @y); // IE9+
	transform: translate(@x, @y);
}

.skew(@x; @y) {
	-webkit-transform: skew(@x, @y);
	-ms-transform: skewX(@x) skewY(@y); // See https://github.com/twbs/bootstrap/issues/4885; IE9+
	transform: skew(@x, @y);
}

.translate3d(@x; @y; @z) {
	-webkit-transform: translate3d(@x, @y, @z);
	transform: translate3d(@x, @y, @z);
}

.rotateX(@degrees) {
	-webkit-transform: rotateX(@degrees);
	-ms-transform: rotateX(@degrees); // IE9+
	transform: rotateX(@degrees);
}

.rotateY(@degrees) {
	-webkit-transform: rotateY(@degrees);
	-ms-transform: rotateY(@degrees); // IE9+
	transform: rotateY(@degrees);
}

.perspective(@perspective) {
	-webkit-perspective: @perspective;
	-moz-perspective: @perspective;
	perspective: @perspective;
}

.perspective-origin(@perspective) {
	-webkit-perspective-origin: @perspective;
	-moz-perspective-origin: @perspective;
	perspective-origin: @perspective;
}

.transform-origin(@origin) {
	-webkit-transform-origin: @origin;
	-moz-transform-origin: @origin;
	transform-origin: @origin;
}

// Animations
.animation(@animation) {
	-webkit-animation: @animation;
	animation: @animation;
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden`
// See git pull https://github.com/dannykeane/bootstrap.git backface-visibility for examples
.backface-visibility(@visibility) {
	-webkit-backface-visibility: @visibility;
	-moz-backface-visibility: @visibility;
	backface-visibility: @visibility;
}

// Box sizing
.box-sizing(@boxmodel) {
	-webkit-box-sizing: @boxmodel;
	-moz-box-sizing: @boxmodel;
	box-sizing: @boxmodel;
}

// Resize anything
.resizable(@direction) {
	resize: @direction; // Options: horizontal, vertical, both
	overflow: auto; // Safari fix
}

// CSS3 Content Columns
.content-columns(@column-count; @column-gap: @grid-gutter-width) {
	-webkit-column-count: @column-count;
	-moz-column-count: @column-count;
	column-count: @column-count;
	-webkit-column-gap: @column-gap;
	-moz-column-gap: @column-gap;
	column-gap: @column-gap;
}

// Optional hyphenation
.hyphens(@mode: auto) {
	word-wrap: break-word;
	-webkit-hyphens: @mode;
	-moz-hyphens: @mode;
	-ms-hyphens: @mode; // IE10+
	-o-hyphens: @mode;
	hyphens: @mode;
}

// Opacity
.opacity(@opacity) {
	opacity: @opacity;
	// IE8 filter
	@opacity-ie: (@opacity * 100);
	filter: ~"alpha(opacity=@{opacity-ie})";
}

// Responsive image
//
// Keep images from scaling beyond the width of their parents.

.img-responsive(@display: block;) {
	display: @display;
	max-width: 100%; // Part 1: Set a maximum relative to the parent
	height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}

// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------------
// Dividers (basically an hr) within dropdowns and nav lists
.nav-divider(@color: #e5e5e5) {
	height: 1px;
	margin: ((@line-height-computed / 2) - 1) 0;
	overflow: hidden;
	background-color: @color;
}

// Button backgrounds
// ------------------
.buttonBackground(@startColor, @endColor, @text-color: #fff) {
	// gradientBar will set the background to a pleasing blend of these, to support IE<=9
	color: @text-color;
	background: @startColor;
	border: 1px solid @endColor;

	// in these cases the gradient won't cover the background, so we override
	&:hover, &:focus, &:active, &.aktiv, &.disabled, &[disabled] {
		color: @text-color;
		background: @endColor;
		border-color: darken(@endColor, 10%);
		text-decoration: none;
	}
}

// Responsive container? (custom)
// -----------

.container-width() when (@responsive = true) {
	max-width: @container-desktop;
}

.container-width() when (@responsive = false) {
	width: @container-desktop;
}

.fixed-outer-container-mixin() when (@responsive = false) {
	// For å unngå "clipping" / disappearing content ved horisontal scroll, når fixed width.
	.fixed-outer-container,
	.sitefooter,
	.pagewrapper {
		min-width: @container-desktop;
	}
}

// Grid System
// -----------

// Centered container element
.container-fixed() {
	margin-right: auto;
	margin-left: auto;
	padding-left: 1.5625em; // 1.5625 tilsvarer 25px. Verdi her var tidligere (@grid-gutter-width / 2);
	padding-right: 1.5625em; //(@grid-gutter-width / 2);
	.clearfix();
}

// Creates a wrapper for a series of columns
.make-row(@gutter: @grid-gutter-width) {
	margin-left: (@gutter / -4);
	margin-right: (@gutter / -4);
	.clearfix();
}

// Generate the extra small columns
.make-xs-column(@columns; @gutter: @grid-gutter-width) {
	// IKKE i bruk
	position: relative;
	float: left;
	width: percentage((@columns / @grid-columns));
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left: (@gutter / 4);
	padding-right: (@gutter / 4);
}

// Generate the small columns
.make-sm-column(@columns; @gutter: @grid-gutter-width) {
	position: relative;
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left: (@gutter / 4);
	padding-right: (@gutter / 4);
	/* @media (max-width: (@screen-small - 0.01)) {
		 padding-left: 0;
		 padding-right: 0;
	  }*/

	// Calculate width based on number of columns available
	@media (min-width: @screen-xs) {
		float: left;
		width: percentage((@columns / @grid-columns));
	}
}

// Generate the small column offsets
.make-sm-column-offset(@columns) {
	@media (min-width: @screen-xs) {
		margin-left: percentage((@columns / @grid-columns));
	}
}

.make-sm-column-push(@columns) {
	@media (min-width: @screen-xs) {
		left: percentage((@columns / @grid-columns));
	}
}

.make-sm-column-pull(@columns) {
	@media (min-width: @screen-xs) {
		right: percentage((@columns / @grid-columns));
	}
}

// Generate the medium columns
.make-md-column(@columns; @gutter: @grid-gutter-width) {
	position: relative;
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left: (@gutter / 4);
	padding-right: (@gutter / 4);

	// Calculate width based on number of columns available
	@media (min-width: @screen-medium) {
		float: left;
		width: percentage((@columns / @grid-columns));
	}
}

// Generate the medium column offsets
.make-md-column-offset(@columns) {
	@media (min-width: @screen-medium) {
		margin-left: percentage((@columns / @grid-columns));
	}
}

.make-md-column-push(@columns) {
	@media (min-width: @screen-medium) {
		left: percentage((@columns / @grid-columns));
	}
}

.make-md-column-pull(@columns) {
	@media (min-width: @screen-medium) {
		right: percentage((@columns / @grid-columns));
	}
}

// Generate the large columns
.make-lg-column(@columns; @gutter: @grid-gutter-width) {
	position: relative;
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left: (@gutter / 2);
	padding-right: (@gutter / 2);

	// Calculate width based on number of columns available
	@media (min-width: @screen-large) {
		float: left;
		width: percentage((@columns / @grid-columns));
	}
}

// Generate the large column offsets
.make-lg-column-offset(@columns) {
	@media (min-width: @screen-large) {
		margin-left: percentage((@columns / @grid-columns));
	}
}

.make-lg-column-push(@columns) {
	@media (min-width: @screen-large) {
		left: percentage((@columns / @grid-columns));
	}
}

.make-lg-column-pull(@columns) {
	@media (min-width: @screen-large) {
		right: percentage((@columns / @grid-columns));
	}
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.

.make-grid-columns() {
	// Common styles for all sizes of grid columns, widths 1-12
	.col(@index) when (@index = 1) {
		// initial
		@item: ~".col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}"; // removed .col-xs-@{index}. Consider adding XL instead, if needed
		.col(@index + 1, @item);
	}
	.col(@index, @list) when (@index =< @grid-columns) {
		// general; "=<" isn't a typo
		@item: ~".col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}"; // removed .col-xs-@{index},
		.col(@index + 1, ~"@{list}, @{item}");
	}
	.col(@index, @list) when (@index > @grid-columns) {
		// terminal
		@{list} {
			position: relative;
			// Prevent columns from collapsing when empty
			min-height: 1px;
			// Inner gutter via padding
			padding-left: (@grid-gutter-width / 4);
			padding-right: (@grid-gutter-width / 4);
			/*@media (max-width: (@screen-small - 0.01)) {
				padding-left: 0;
				padding-right: 0;
			  }*/
		}
	}
	.col(1); // kickstart it
}

.make-grid-columns-float(@class) {
	.col(@index) when (@index = 1) {
		// initial
		@item: ~".col-@{class}-@{index}";
		.col(@index + 1, @item);
	}
	.col(@index, @list) when (@index < @grid-columns) {
		// general
		@item: ~".col-@{class}-@{index}";
		.col(@index + 1, ~"@{list}, @{item}");
	}
	.col(@index, @list) when (@index = @grid-columns) {
		// terminal
		@{list} {
			float: left;
		}
	}
	.col(1); // kickstart it
}

.calc-grid(@index, @class, @type) when (@type = width) and (@index > 0) {
	.col-@{class}-@{index} {
		width: percentage((@index / @grid-columns));
	}
}

.calc-grid(@index, @class, @type) when (@type = push) {
	.col-@{class}-push-@{index} {
		left: percentage((@index / @grid-columns));
	}
}

.calc-grid(@index, @class, @type) when (@type = pull) {
	.col-@{class}-pull-@{index} {
		right: percentage((@index / @grid-columns));
	}
}

.calc-grid(@index, @class, @type) when (@type = offset) {
	.col-@{class}-offset-@{index} {
		margin-left: percentage((@index / @grid-columns));
	}
}

// Basic looping in LESS
.make-grid(@index, @class, @type) when (@index >= 0) {
	.calc-grid(@index, @class, @type);
	// next iteration
	.make-grid(@index - 1, @class, @type);
}

//--------------------------------------------------------
//
//
//  CUSTOM STYLES FROM THIS POINT
//
//
//--------------------------------------------------------

// Dropdown indicator arrow (expand/collapse). Used for linklists atm.
// (Consider parameterizing)
// -------------------------
.dropdown-indicator-collapsed() {
	content: " ";
	display: inline-block;
	border-top: 6px solid @blue-light; // Pil ned
	border-right: 6px solid transparent;
	border-left: 6px solid transparent;
	position: absolute;
	right: 15px;
	top: 42%; // TODO kontrollsjekke avstand
}

.dropdown-indicator-expanded() {
	border-bottom: 6px solid @blue-light; // Pil opp
	border-top: none;
	border-right: 6px solid transparent;
	border-left: 6px solid transparent;
}

// Bullet point
// -------------------------
.bullet-point(@border-size, @border-color, @left, @top) {
	// Hvorfor har vi egentlig denne? Svar: "bullet point" separering mellom lenker er noe som brukes flere plasser og det krever en del css linjer, kan gjenbrukes her
	border: @border-size solid @border-color;
	border-radius: 50% 50% 50% 50%;
	content: " ";
	left: @left;
	top: @top;
	float: left;
	position: absolute;
	text-align: left;
}

// Down arrow (caret, dropdown)
// -------------------------

.down-arrow(@border-left, @border-right, @border-top, @color) {

	border-left: @border-left solid transparent;
	border-right: @border-right solid transparent;
	border-top: @border-top solid @color;
	content: "";
	display: inline-block;
	height: 0;
	width: 0;
	vertical-align: top;
}

//

// Up arrow
// -------------------------
.up-arrow(@border-bottom, @border-left, @border-right, @color) {

	border-bottom: @border-bottom solid @color;
	border-left: @border-left solid transparent;
	border-right: @border-right solid transparent;
	content: "";
	display: inline-block;
	height: 0;
	width: 0;
	vertical-align: top;
}

// Knapper i talesyntese (deler state)
// -----------
.tts-button-states() {

	// Hover/focus state
	&:hover, &:focus {
		//background-color: #000;
		background-color: @blue-light;
		color: #fff;
		.transition(background-position .1s linear);
	}
	// Focus state for keyboard and accessibility
	&:focus {
		// .tab-focus();
	}
	// Active state
	&.active, &:active {
		background-color: @blue-light;
		color: #fff;
		outline: 0;
	}
}

// Gradient with background-image png, svg etc.
.gradient-and-image(@imageRef, @startColor, @endColor) {

	background-image: url(@imageRef); /* fallback */
	background-image: url(@imageRef), -webkit-gradient(linear, left top, left bottom, from(@startColor), to(@endColor)); /* Saf4+, Chrome */
	background-image: url(@imageRef), -webkit-linear-gradient(top, @startColor, @endColor); /* Chrome 10+, Saf5.1+ */
	background-image: url(@imageRef), -moz-linear-gradient(top, @startColor, @endColor); /* FF3.6+ */
	background-image: url(@imageRef), -ms-linear-gradient(top, @startColor, @endColor); /* IE10 */
	background-image: url(@imageRef), -o-linear-gradient(top, @startColor, @endColor); /* Opera 11.10+ */
	background-image: url(@imageRef), linear-gradient(top, @startColor, @endColor); /* W3C */
}

// Flex box support
// -----------
.flex-box() {
	flex: 1 1 auto;
	-webkit-flex: 1;
	flex-direction: row;
	height: auto;
}

.flex-container() {
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
	//flex-flow:row nowrap;
}

